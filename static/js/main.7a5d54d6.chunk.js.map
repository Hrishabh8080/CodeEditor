{"version":3,"sources":["Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","displayName","language","value","onChange","useState","open","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","title","sendbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA2CeA,EAhCA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC9C,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAKA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGP,EACD,wBACEO,UAAU,sBACVC,QAAS,kBAAMF,GAAQ,SAACG,GAAD,OAAeA,MAFxC,SAIE,cAAC,IAAD,CAAiBC,KAAML,EAAOM,IAAgBC,WAGlD,cAAC,aAAD,CACEC,eAhBe,SAACC,EAAQC,EAAMb,GAClCC,EAASD,IAgBLA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMlB,EACNmB,aAAa,EACbC,MAAO,kBCwBFC,MAzDf,WACE,MAAwBlB,mBAAS,IAAjC,mBAAOmB,EAAP,KAAaC,EAAb,KACA,EAAsBpB,mBAAS,IAA/B,mBAAOqB,EAAP,KAAYC,EAAZ,KACA,EAAoBtB,mBAAS,IAA7B,mBAAOuB,EAAP,KAAWC,EAAX,KACA,EAA4BxB,mBAAS,IAArC,mBAAOyB,EAAP,KAAeC,EAAf,KAiBA,OAhBAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAU,mCAAD,OAGCP,EAHD,mCAIEE,EAJF,qCAKGE,EALH,4CASR,KAEH,OAAO,kBAAMO,aAAaF,MACzB,CAACT,EAAME,EAAKE,IAGb,qCACE,sBAAKpB,UAAU,gBAAf,UACE,cAAC,EAAD,CACEN,SAAS,MACTD,YAAY,OACZE,MAAOqB,EACPpB,SAAUqB,IAEZ,cAAC,EAAD,CACEvB,SAAS,MACTD,YAAY,MACZE,MAAOuB,EACPtB,SAAUuB,IAEZ,cAAC,EAAD,CACEzB,SAAS,aACTD,YAAY,aACZE,MAAOyB,EACPxB,SAAUyB,OAGd,qBAAKrB,UAAU,QAAf,SACE,wBACEsB,OAAQA,EACRM,MAAM,SACNC,QAAQ,eACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eC1CFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7a5d54d6.chunk.js","sourcesContent":["import \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/css/css\";\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Editor = ({ displayName, language, value, onChange }) => {\n  const [open, setOpen] = useState(true);\n  const handleChange = (editor, data, value) => {\n    onChange(value);\n  };\n\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          lineNumbers: true,\n          theme: \"material\"\n        }}\n      ></ControlledEditor>\n    </div>\n  );\n};\nexport default Editor;\n","import { useState ,useEffect} from \"react\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n  const [html, setHtml] = useState(\"\");\n  const [css, setCss] = useState(\"\");\n  const [js, setJs] = useState(\"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(\n        `\n        <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n        </html>\n        `\n      );\n    }, 1000);\n    \n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JAVASCRIPT\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane \">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sendbox=\"allow-script\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        ></iframe>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}